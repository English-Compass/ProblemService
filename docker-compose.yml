version: '3.8'

services:
  app:
    build: .
    container_name: problem-app
    ports:
      - "8082:8080"    # Spring Boot application port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      # MySQL 연결 (db 컨테이너)
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/problem_service_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
      - SPRING_DATASOURCE_USERNAME=problem_user
      - SPRING_DATASOURCE_PASSWORD=problem_password
      # Redis 연결 (redis 컨테이너)
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      # Kafka 연결 (kafka 컨테이너)
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # 외부 API 키
      - KAKAO_API_KEY=${KAKAO_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    depends_on:
      - db
      # - redis
      # - kafka
    networks:
      - problem-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  db:
    image: mysql:8.0
    container_name: problem-mysql
    environment:
      - MYSQL_DATABASE=problem_service_db
      - MYSQL_USER=problem_user
      - MYSQL_PASSWORD=problem_password
      - MYSQL_ROOT_PASSWORD=root_password
    ports:
      - "3306:3306"    # MySQL database port
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - problem-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # redis:
  #   image: redis:7-alpine
  #   container_name: problem-redis
  #   ports:
  #     - "6379:6379"    # Redis cache port
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - problem-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s



  # kafka:
  #   image: confluentinc/cp-kafka:7.4.0
  #   container_name: problem-kafka
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
  #   ports:
  #     - "29092:29092"   # Kafka external port (internal: 9092)
  #   depends_on:
  #     - zookeeper
  #   networks:
  #     - problem-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.4.0
  #   container_name: problem-zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - "2181:2181"    # Zookeeper client port
  #   networks:
  #     - problem-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

  # # Nginx 웹 서버 및 로드 밸런서
  # # Fixed: nginx.conf mount issue - changed from directory to file mount
  # nginx:
  #   image: nginx:alpine
  #   container_name: problem-nginx
  #   ports:
  #     - "80:80"      # HTTP
  #     - "443:443"    # HTTPS (선택사항)
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/conf.d:/etc/nginx/conf.d:ro
  #     - ./nginx/html:/usr/share/nginx/html:ro
  #     - ./nginx/logs:/var/log/nginx
  #   depends_on:
  #     - app
  #   networks:
  #     - problem-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

volumes:
  mysql_data:
  # redis_data:

networks:
  problem-network:
    driver: bridge
